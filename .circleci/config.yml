# Java Maven CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2.1
#orbs:
#  heroku: circleci/heroku@2.0.0
jobs:
  build:
    docker:
      # specify the version you desire here
      # nazwy zmiennych sa nieprzypadkowe, wynikaja z uploadem na heroku
      - image: cimg/openjdk:17.0.9
        environment:
          JDBC_DATABASE_URL: jdbc:postgresql://localhost:5432/circle_db
      #          JDBC_DATABASE_USERNAME: postgres
      #          JDBC_DATABASE_PASSWORD: password
      - image: cimg/postgres:15.0
        environment:
          POSTGRES_DB: circle_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password

    working_directory: ~/circleci-spring-example

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: mvn dependency:go-offline

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}

      # run tests!
      - run: mvn test
  # zmienne HEROKU pobieramy z Heroku i dodajemy w CircleCi
  deploy:
    docker:
      - image: cimg/base:stable # primary container will run the latest, production-ready base image
    # Authentication Heroku API Key
    description: |
      Verifies the Heroku API key has been added so we can authenticate.
    parameters:
      print-whoami:
        default: false
        description: Print the result of heroku auth:whoami.
        type: boolean
    steps:
      - run:
          command: |
            #!/bin/bash

            if [[ $HEROKU_API_KEY == "" ]]; then
              echo "No Heroku API key set, please set the HEROKU_API_KEY environment variable."
              echo "This can be found by running the $(heroku auth:token) command locally."
              exit 1
            else
              echo "Heroku API key found."
            fi
          environment:
            PARAM_WHOAMI: <<parameters.print-whoami>>
          name: Verify HEROKU_API_KEY is set

      - checkout
      - run:
          name: Check HEROKU_APP_NAME
          command: echo $HEROKU_APP_NAME
      - run:
          name: Deploy app on heroku
          command: |
            git remote add heroku https://git.heroku.com/$HEROKU_APP_NAME.git
            git push heroku master
#            git remote add heroku git@heroku.com:$HEROKU_APP_NAME.git
#            git push heroku HEAD:master
#            git remote add heroku https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git
#          command: |
#            git push
#            https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git

workflows:
  #  version: 2
  build-deploy:
    jobs:
      - build
      - hold:
          type: approval
          requires:
            - build # only run deploy-via-git job if the build job has completed
      - deploy:
          requires:
            - hold
          filters:
            branches:
              only: master # only run deploy-via-git job on master branch
